name: CI/CD Pipeline

# Trigger the workflow on push or pull request to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # The OS environment the workflow will run on

    services:
      docker:
        image: docker:19.03.12  # Docker image to use for running Docker commands
        options: --privileged    # Run in privileged mode to allow Docker-in-Docker
        ports:
          - 2375:2375            # Expose Docker port
        env:
          DOCKER_TLS_CERTDIR: ""  # Disable Docker's TLS

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js for building the React app
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'     # Use Node.js version 18

      # Step 3: Cache Node.js modules to speed up subsequent runs
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: frontend-react/node_modules  # Path to cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend-react/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node/  # Restore cache if available

      # Step 4: Install Node.js dependencies and build the React app
      - name: Install dependencies and build React app
        working-directory: ./frontend-react
        run: |
          npm ci               # Install dependencies using package-lock.json
          npm run build         # Build the React app

      # Step 5: Set up Python for the FastAPI backend
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'  # Use Python version 3.11

      # Step 6: Install Python dependencies for the FastAPI backend
      - name: Install dependencies for FastAPI
        run: |
          python -m pip install --upgrade pip  # Upgrade pip
          pip install -r requirements.txt      # Install dependencies from requirements.txt

      # Step 7: Run pytest tests for the FastAPI backend
      - name: Run pytest tests
        run: |
          pytest --maxfail=1 --disable-warnings  # Run pytest, stop at first failure

      # Step 8: Log in to Docker Hub
      # Use Docker credentials stored in GitHub Secrets to log in
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username stored in secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password stored in secrets

      # Step 9: Build and push Docker image
      # This step builds the Docker image from the Dockerfile and pushes it to Docker Hub
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fullstack-app:latest .  # Build the Docker image
          docker push ${{ secrets.DOCKER_USERNAME }}/fullstack-app:latest         # Push the image to Docker Hub

      # Step 10: Notify of a successful build
      # This step outputs a success message if the Docker build and push steps succeed
      - name: Build Success Notification
        run: echo "Docker image has been built and pushed successfully."

  deploy:
    runs-on: ubuntu-latest  # The OS environment for deployment
    needs: build            # Ensure the deployment job runs only after the build job

    steps:
      # Step 11: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 12: Pull and run the Docker container for the application
      # This step pulls the built Docker image and runs it on the server
      - name: Deploy Application
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/fullstack-app:latest  # Pull the latest image from Docker Hub
          docker run -d -p 8000:8000 --name fullstack-app ${{ secrets.DOCKER_USERNAME }}/fullstack-app:latest  # Run the app in a container
