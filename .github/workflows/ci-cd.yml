name: CI/CD Pipeline

# Trigger the workflow on push or pull request to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ENVIRONMENT_NAME: Indian-Tax-Advisor  # Use the environment name for the secrets

jobs:
  # Job 1: Test Job
  test:
    runs-on: ubuntu-latest  # OS environment for the test job
    
    services:
      docker:
        image: docker:19.03.12  # Use Docker-in-Docker for testing container-based apps
        options: --privileged    # Allow privileged Docker commands
        ports:
          - 2375:2375            # Expose Docker port
        env:
          DOCKER_TLS_CERTDIR: ""  # Disable Docker's TLS

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js for the React frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Set the Node.js version

      # Step 3: Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules  # Cache directory for the frontend node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node/

      # Step 4: Install Node.js dependencies and run tests for React app
      - name: Install and test React app
        working-directory: ./frontend  # Navigate to the frontend folder
        run: |
          npm ci                # Install dependencies
          npm test              # Run tests for React frontend

      # Step 5: Set up Python for FastAPI backend
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'  # Python version 3.11 for FastAPI

      # Step 6: Cache Python dependencies
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip  # Cache pip packages
          key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip/

      # Step 7: Install Python dependencies and run tests for FastAPI
      - name: Install and test FastAPI backend
        working-directory: ./backend  # Navigate to the backend folder
        run: |
          python -m pip install --upgrade pip  # Upgrade pip
          pip install -r requirements.txt      # Install dependencies
          pytest --maxfail=1 --disable-warnings  # Run backend tests with pytest

  # Job 2: Build Job
  build:
    runs-on: ubuntu-latest
    needs: test  # Build only if tests pass

    services:
      docker:
        image: docker:19.03.12  # Docker-in-Docker for building images
        options: --privileged
        ports:
          - 2375:2375
        env:
          DOCKER_TLS_CERTDIR: ""

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub using stored secrets from the environment
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.INDIAN_TAX_ADVISOR.DOCKER_USERNAME }}  # Docker Hub username from environment secrets
          password: ${{ secrets.INDIAN_TAX_ADVISOR.DOCKER_PASSWORD }}  # Docker Hub password from environment secrets

      # Step 3: Build and push the Docker image to Docker Hub
      - name: Build and push Docker image
        run: |
          IMAGE_TAG=${{ secrets.INDIAN_TAX_ADVISOR.DOCKER_USERNAME }}/tax-app:${{ github.sha }}  # Use commit SHA for versioning
          docker build -t $IMAGE_TAG .  # Build the Docker image
          docker push $IMAGE_TAG         # Push the Docker image to Docker Hub

  # Job 3: Deploy Job
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Deploy only if the build is successful

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Pull and run the Docker container on the server
      - name: Deploy Application
        run: |
          IMAGE_TAG=${{ secrets.INDIAN_TAX_ADVISOR.DOCKER_USERNAME }}/tax-app:${{ github.sha }}  # Use the same tag as built
          docker pull $IMAGE_TAG  # Pull the latest image from Docker Hub
          docker stop tax-app || true  # Stop any running container (ignore if none exists)
          docker rm tax-app || true    # Remove the stopped container (ignore if none exists)
          docker run -d -p 8000:8000 --name tax-app $IMAGE_TAG  # Run the app in a container

      # Step 3: Notify on failure (optional)
      - name: Notify on Failure
        if: failure()  # Trigger this step if the previous steps failed
        run: |
          echo "Deployment failed! Please check the logs."  # Replace with notification command as needed
